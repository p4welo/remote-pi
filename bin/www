#!/usr/bin/env node
var debug = require('debug')('nodetest1');
var app = require('../app');

var gpio = require('pi-gpio'),
    async = require('async'),
    tank = {},
    _leftMotorFront = 11,
    _leftMotorBack = 12,
    _rightMotorFront = 15,
    _rightMotorBack = 16;

var movingForward = false,
    movingBackward = false;

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function () {
    debug('Express server listening on port ');// + server.address().port);
});

tank.initPins = function () {
//    async.parallel([
    gpio.open(_leftMotorFront, "output");
    gpio.open(_leftMotorBack, "output");
    gpio.open(_rightMotorFront, "output");
    gpio.open(_rightMotorBack, "output");
//    ]);
};

tank.moveForward = function () {
    async.parallel([
        gpio.write(_leftMotorBack, 0),
        gpio.write(_rightMotorBack, 0)
    ]);
    async.parallel([
        gpio.write(_leftMotorFront, 1),
        gpio.write(_rightMotorFront, 1)
    ]);
};

tank.moveBackward = function () {
    async.parallel([
        gpio.write(_leftMotorFront, 0),
        gpio.write(_rightMotorFront, 0)
    ]);
    async.parallel([
        gpio.write(_leftMotorBack, 1),
        gpio.write(_rightMotorBack, 1)
    ]);
};

tank.turnLeft = function () {
    gpio.write(_rightMotorFront, 1);
};

tank.turnRight = function () {
    gpio.write(_leftMotorFront, 1);
};

tank.stopAllMotors = function () {
    async.parallel([
        gpio.write(_leftMotorFront, 0),
        gpio.write(_leftMotorBack, 0),
        gpio.write(_rightMotorFront, 0),
        gpio.write(_rightMotorBack, 0)
    ]);
};

var io = require('socket.io').listen(server);

io.set('log level', 1); //turn off debug
io.sockets.on('connection', function (socket) {
    socket.on('keydown', function (dir) {
        switch (dir) {
            case 'up':
                console.log("MOVING: FORWARD");
                tank.moveForward();
                break;
            case 'down':
                console.log("MOVING: BACKWARD");
                tank.moveBackward();
                break;
            case 'left':
                console.log("MOVING: LEFT")
//                tank.turnLeft();
                break;
            case 'right':
                console.log("MOVING: RIGHT")
//                tank.turnRight();
                break;
        }
    });
    socket.on('keyup', function (dir) {
        tank.stopAllMotors();
    });
});

tank.initPins();